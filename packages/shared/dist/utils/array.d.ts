export declare function chunk<T>(array: T[], size: number): T[][];
export declare function unique<T>(array: T[]): T[];
export declare function uniqueBy<T, K>(array: T[], key: (item: T) => K): T[];
export declare function groupBy<T, K>(array: T[], key: (item: T) => K): Map<K, T[]>;
export declare function sortBy<T>(array: T[], key: (item: T) => any, direction?: 'asc' | 'desc'): T[];
export declare function filterBy<T>(array: T[], predicate: (item: T) => boolean): T[];
export declare function find<T>(array: T[], predicate: (item: T) => boolean): T | undefined;
export declare function findIndex<T>(array: T[], predicate: (item: T) => boolean): number;
export declare function includes<T>(array: T[], item: T): boolean;
export declare function remove<T>(array: T[], item: T): T[];
export declare function removeAt<T>(array: T[], index: number): T[];
export declare function insert<T>(array: T[], index: number, item: T): T[];
export declare function replace<T>(array: T[], index: number, item: T): T[];
export declare function shuffle<T>(array: T[]): T[];
export declare function sample<T>(array: T[], size?: number): T[];
export declare function flatten<T>(array: (T | T[])[]): T[];
export declare function compact<T>(array: (T | null | undefined)[]): T[];
export declare function intersection<T>(array1: T[], array2: T[]): T[];
export declare function union<T>(array1: T[], array2: T[]): T[];
export declare function difference<T>(array1: T[], array2: T[]): T[];
export declare function symmetricDifference<T>(array1: T[], array2: T[]): T[];
export declare function countBy<T, K>(array: T[], key: (item: T) => K): Map<K, number>;
export declare function sumBy<T>(array: T[], key: (item: T) => number): number;
export declare function averageBy<T>(array: T[], key: (item: T) => number): number;
export declare function minBy<T>(array: T[], key: (item: T) => number): T | undefined;
export declare function maxBy<T>(array: T[], key: (item: T) => number): T | undefined;
export declare function partition<T>(array: T[], predicate: (item: T) => boolean): [T[], T[]];
export declare function zip<T, U>(array1: T[], array2: U[]): [T, U][];
export declare function unzip<T, U>(array: [T, U][]): [T[], U[]];
//# sourceMappingURL=array.d.ts.map