// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  domain    String?
  settings  Json     @default("{}")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users        User[]
  files        File[]
  auditLogs    AuditLog[]
  roles        Role[]
  permissions  Permission[]
  sessions     Session[]
  integrations Integration[]
  workflows    Workflow[]
  alertRules   AlertRule[]

  @@map("tenants")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String?
  lastName  String?
  avatar    String?
  role      String   @default("user")
  tenantId  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sessions  Session[]
  files     File[]
  auditLogs AuditLog[]
  userRoles UserRole[]

  @@unique([email, tenantId])
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  tenantId  String
  token     String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@map("sessions")
}

model File {
  id        String   @id @default(cuid())
  name      String
  path      String
  size      Int
  mimeType  String
  tenantId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("files")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  resource  String
  details   Json
  tenantId  String
  userId    String?
  createdAt DateTime @default(now())

  // Relations
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model Role {
  id          String   @id @default(cuid())
  name        String
  description String
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  permissions RolePermission[]
  userRoles   UserRole[]

  @@unique([name, tenantId])
  @@map("roles")
}

model Permission {
  id        String   @id @default(cuid())
  name      String
  resource  String
  action    String
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant          Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  rolePermissions RolePermission[]

  @@unique([name, tenantId])
  @@map("permissions")
}

model RolePermission {
  id           String   @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id         String   @id @default(cuid())
  userId     String
  roleId     String
  tenantId   String
  assignedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId, tenantId])
  @@map("user_roles")
}

// Integration models
model Integration {
  id        String   @id @default(cuid())
  name      String
  provider  String
  type      String
  config    Json
  status    String   @default("active")
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  syncJobs SyncJob[]

  @@map("integrations")
}

model SyncJob {
  id               String    @id @default(cuid())
  integrationId    String
  status           String
  startedAt        DateTime?
  completedAt      DateTime?
  error            String?
  recordsProcessed Int       @default(0)
  recordsFailed    Int       @default(0)
  metadata         Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@map("sync_jobs")
}

// Workflow models
model Workflow {
  id          String   @id @default(cuid())
  name        String
  description String
  config      Json
  status      String   @default("active")
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant     Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  executions WorkflowExecution[]

  @@map("workflows")
}

model WorkflowExecution {
  id          String    @id @default(cuid())
  workflowId  String
  status      String
  input       Json
  output      Json?
  error       String?
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  tenantId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_executions")
}

// Alert models
model AlertRule {
  id          String   @id @default(cuid())
  name        String
  description String
  conditions  Json
  actions     Json
  cooldown    Int
  priority    String
  isActive    Boolean  @default(true)
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  alerts Alert[]

  @@map("alert_rules")
}

model Alert {
  id        String   @id @default(cuid())
  ruleId    String
  message   String
  severity  String
  metadata  Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  rule       AlertRule       @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  deliveries AlertDelivery[]

  @@map("alerts")
}

model AlertDelivery {
  id        String    @id @default(cuid())
  alertId   String
  channel   String
  status    String
  sentAt    DateTime?
  error     String?
  createdAt DateTime  @default(now())

  // Relations
  alert Alert @relation(fields: [alertId], references: [id], onDelete: Cascade)

  @@map("alert_deliveries")
}
