generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  settings  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users         User[]
  organizations Organization[]
  projects      Project[]
  tasks         Task[]

  @@map("tenants")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String
  role           String    @default("user")
  organizationId String    @map("organization_id")
  isActive       Boolean   @default(true) @map("is_active")
  lastLogin      DateTime? @map("last_login")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  projects     Project[]
  assignedTasks Task[]     @relation("AssignedTasks")
  createdTasks  Task[]     @relation("CreatedTasks")

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([organizationId])
  @@map("users")
}

model Organization {
  id           String    @id @default(cuid())
  name         String
  domain       String?   @unique
  plan         String    @default("starter")
  billingEmail String    @map("billing_email")
  settings     String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  users    User[]
  projects Project[]

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("organizations")
}

model Project {
  id             String    @id @default(cuid())
  name           String
  description    String?
  organizationId String    @map("organization_id")
  status         String    @default("planning")
  budget         Decimal?
  startDate      DateTime? @map("start_date")
  endDate        DateTime? @map("end_date")
  createdBy      String    @map("created_by")
  tags           String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  creator      User         @relation(fields: [createdBy], references: [id])
  tasks        Task[]

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([organizationId])
  @@map("projects")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  projectId   String    @map("project_id")
  assignedTo  String?   @map("assigned_to")
  createdBy   String    @map("created_by")
  priority    String    @default("medium")
  status      String    @default("todo")
  dueDate     DateTime? @map("due_date")
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  project    Project @relation(fields: [projectId], references: [id])
  assignee   User?   @relation("AssignedTasks", fields: [assignedTo], references: [id])
  creator    User    @relation("CreatedTasks", fields: [createdBy], references: [id])

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([projectId])
  @@index([assignedTo])
  @@map("tasks")
}